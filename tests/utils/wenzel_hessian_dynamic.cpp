#include <iostream>
#include <fstream>
#include <string>
#include <Eigen/Cholesky>
#include "../headers/autodiff.h"
#include <chrono>

DECLARE_DIFFSCALAR_BASE();
using namespace std;
using namespace std::chrono;

typedef Eigen::Matrix<double, Eigen::Dynamic, 1> Gradient;
typedef Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Hessian;

int main(int argc, char **argv)
{

   string output_filename = argv[1];
   cout << output_filename << endl;

   typedef DScalar2<double, Gradient, Hessian> DScalar;

   int num_params = 8010;
   int num_vars = 17;
   int num_ders = num_vars * num_vars;

   Eigen::VectorXd args(num_params * num_vars);
   Eigen::VectorXd ders(num_params * num_ders);

   std::ifstream file("./tests/utils/hessian/params.txt");
   int i = 0;
   for (std::string line; std::getline(file, line);)
   {
       args(i) = stod(line.c_str());
       i++;
   }
   file.close();

   ofstream outfile;
   outfile.open(output_filename);

   auto start = high_resolution_clock::now();
   for (int index = 0; index < num_params; index++)
   {
       /* There are two independent variables */
       DiffScalarBase::setVariableCount(17);
		DScalar t(0, args[index * 17 + 0]), U(1, args[index * 17 + 1]), w(2, args[index * 17 + 2]), K(3, args[index * 17 + 3]), x(4, args[index * 17 + 4]), B(5, args[index * 17 + 5]), F(6, args[index * 17 + 6]), R(7, args[index * 17 + 7]), u(8, args[index * 17 + 8]), E(9, args[index * 17 + 9]), Z(10, args[index * 17 + 10]), Y(11, args[index * 17 + 11]), k(12, args[index * 17 + 12]), l(13, args[index * 17 + 13]), A(14, args[index * 17 + 14]), V(15, args[index * 17 + 15]), N(16, args[index * 17 + 16]);
		DScalar Fx = 4*4*4*4*4*4*4*4*4*4*4*4*4*4*4*4*4*((t * (1 - t))*(U * (1 - U))*(w * (1 - w))*(K * (1 - K))*(x * (1 - x))*(B * (1 - B))*(F * (1 - F))*(R * (1 - R))*(u * (1 - u))*(E * (1 - E))*(Z * (1 - Z))*(Y * (1 - Y))*(k * (1 - k))*(l * (1 - l))*(A * (1 - A))*(V * (1 - V))*(N * (1 - N)));
		ders[index * 289 + 0] = Fx.getHessian()(0);
		ders[index * 289 + 1] = Fx.getHessian()(1);
		ders[index * 289 + 2] = Fx.getHessian()(2);
		ders[index * 289 + 3] = Fx.getHessian()(3);
		ders[index * 289 + 4] = Fx.getHessian()(4);
		ders[index * 289 + 5] = Fx.getHessian()(5);
		ders[index * 289 + 6] = Fx.getHessian()(6);
		ders[index * 289 + 7] = Fx.getHessian()(7);
		ders[index * 289 + 8] = Fx.getHessian()(8);
		ders[index * 289 + 9] = Fx.getHessian()(9);
		ders[index * 289 + 10] = Fx.getHessian()(10);
		ders[index * 289 + 11] = Fx.getHessian()(11);
		ders[index * 289 + 12] = Fx.getHessian()(12);
		ders[index * 289 + 13] = Fx.getHessian()(13);
		ders[index * 289 + 14] = Fx.getHessian()(14);
		ders[index * 289 + 15] = Fx.getHessian()(15);
		ders[index * 289 + 16] = Fx.getHessian()(16);
		ders[index * 289 + 17] = Fx.getHessian()(18);
		ders[index * 289 + 18] = Fx.getHessian()(19);
		ders[index * 289 + 19] = Fx.getHessian()(20);
		ders[index * 289 + 20] = Fx.getHessian()(21);
		ders[index * 289 + 21] = Fx.getHessian()(22);
		ders[index * 289 + 22] = Fx.getHessian()(23);
		ders[index * 289 + 23] = Fx.getHessian()(24);
		ders[index * 289 + 24] = Fx.getHessian()(25);
		ders[index * 289 + 25] = Fx.getHessian()(26);
		ders[index * 289 + 26] = Fx.getHessian()(27);
		ders[index * 289 + 27] = Fx.getHessian()(28);
		ders[index * 289 + 28] = Fx.getHessian()(29);
		ders[index * 289 + 29] = Fx.getHessian()(30);
		ders[index * 289 + 30] = Fx.getHessian()(31);
		ders[index * 289 + 31] = Fx.getHessian()(32);
		ders[index * 289 + 32] = Fx.getHessian()(33);
		ders[index * 289 + 33] = Fx.getHessian()(36);
		ders[index * 289 + 34] = Fx.getHessian()(37);
		ders[index * 289 + 35] = Fx.getHessian()(38);
		ders[index * 289 + 36] = Fx.getHessian()(39);
		ders[index * 289 + 37] = Fx.getHessian()(40);
		ders[index * 289 + 38] = Fx.getHessian()(41);
		ders[index * 289 + 39] = Fx.getHessian()(42);
		ders[index * 289 + 40] = Fx.getHessian()(43);
		ders[index * 289 + 41] = Fx.getHessian()(44);
		ders[index * 289 + 42] = Fx.getHessian()(45);
		ders[index * 289 + 43] = Fx.getHessian()(46);
		ders[index * 289 + 44] = Fx.getHessian()(47);
		ders[index * 289 + 45] = Fx.getHessian()(48);
		ders[index * 289 + 46] = Fx.getHessian()(49);
		ders[index * 289 + 47] = Fx.getHessian()(50);
		ders[index * 289 + 48] = Fx.getHessian()(54);
		ders[index * 289 + 49] = Fx.getHessian()(55);
		ders[index * 289 + 50] = Fx.getHessian()(56);
		ders[index * 289 + 51] = Fx.getHessian()(57);
		ders[index * 289 + 52] = Fx.getHessian()(58);
		ders[index * 289 + 53] = Fx.getHessian()(59);
		ders[index * 289 + 54] = Fx.getHessian()(60);
		ders[index * 289 + 55] = Fx.getHessian()(61);
		ders[index * 289 + 56] = Fx.getHessian()(62);
		ders[index * 289 + 57] = Fx.getHessian()(63);
		ders[index * 289 + 58] = Fx.getHessian()(64);
		ders[index * 289 + 59] = Fx.getHessian()(65);
		ders[index * 289 + 60] = Fx.getHessian()(66);
		ders[index * 289 + 61] = Fx.getHessian()(67);
		ders[index * 289 + 62] = Fx.getHessian()(72);
		ders[index * 289 + 63] = Fx.getHessian()(73);
		ders[index * 289 + 64] = Fx.getHessian()(74);
		ders[index * 289 + 65] = Fx.getHessian()(75);
		ders[index * 289 + 66] = Fx.getHessian()(76);
		ders[index * 289 + 67] = Fx.getHessian()(77);
		ders[index * 289 + 68] = Fx.getHessian()(78);
		ders[index * 289 + 69] = Fx.getHessian()(79);
		ders[index * 289 + 70] = Fx.getHessian()(80);
		ders[index * 289 + 71] = Fx.getHessian()(81);
		ders[index * 289 + 72] = Fx.getHessian()(82);
		ders[index * 289 + 73] = Fx.getHessian()(83);
		ders[index * 289 + 74] = Fx.getHessian()(84);
		ders[index * 289 + 75] = Fx.getHessian()(90);
		ders[index * 289 + 76] = Fx.getHessian()(91);
		ders[index * 289 + 77] = Fx.getHessian()(92);
		ders[index * 289 + 78] = Fx.getHessian()(93);
		ders[index * 289 + 79] = Fx.getHessian()(94);
		ders[index * 289 + 80] = Fx.getHessian()(95);
		ders[index * 289 + 81] = Fx.getHessian()(96);
		ders[index * 289 + 82] = Fx.getHessian()(97);
		ders[index * 289 + 83] = Fx.getHessian()(98);
		ders[index * 289 + 84] = Fx.getHessian()(99);
		ders[index * 289 + 85] = Fx.getHessian()(100);
		ders[index * 289 + 86] = Fx.getHessian()(101);
		ders[index * 289 + 87] = Fx.getHessian()(108);
		ders[index * 289 + 88] = Fx.getHessian()(109);
		ders[index * 289 + 89] = Fx.getHessian()(110);
		ders[index * 289 + 90] = Fx.getHessian()(111);
		ders[index * 289 + 91] = Fx.getHessian()(112);
		ders[index * 289 + 92] = Fx.getHessian()(113);
		ders[index * 289 + 93] = Fx.getHessian()(114);
		ders[index * 289 + 94] = Fx.getHessian()(115);
		ders[index * 289 + 95] = Fx.getHessian()(116);
		ders[index * 289 + 96] = Fx.getHessian()(117);
		ders[index * 289 + 97] = Fx.getHessian()(118);
		ders[index * 289 + 98] = Fx.getHessian()(126);
		ders[index * 289 + 99] = Fx.getHessian()(127);
		ders[index * 289 + 100] = Fx.getHessian()(128);
		ders[index * 289 + 101] = Fx.getHessian()(129);
		ders[index * 289 + 102] = Fx.getHessian()(130);
		ders[index * 289 + 103] = Fx.getHessian()(131);
		ders[index * 289 + 104] = Fx.getHessian()(132);
		ders[index * 289 + 105] = Fx.getHessian()(133);
		ders[index * 289 + 106] = Fx.getHessian()(134);
		ders[index * 289 + 107] = Fx.getHessian()(135);
		ders[index * 289 + 108] = Fx.getHessian()(144);
		ders[index * 289 + 109] = Fx.getHessian()(145);
		ders[index * 289 + 110] = Fx.getHessian()(146);
		ders[index * 289 + 111] = Fx.getHessian()(147);
		ders[index * 289 + 112] = Fx.getHessian()(148);
		ders[index * 289 + 113] = Fx.getHessian()(149);
		ders[index * 289 + 114] = Fx.getHessian()(150);
		ders[index * 289 + 115] = Fx.getHessian()(151);
		ders[index * 289 + 116] = Fx.getHessian()(152);
		ders[index * 289 + 117] = Fx.getHessian()(162);
		ders[index * 289 + 118] = Fx.getHessian()(163);
		ders[index * 289 + 119] = Fx.getHessian()(164);
		ders[index * 289 + 120] = Fx.getHessian()(165);
		ders[index * 289 + 121] = Fx.getHessian()(166);
		ders[index * 289 + 122] = Fx.getHessian()(167);
		ders[index * 289 + 123] = Fx.getHessian()(168);
		ders[index * 289 + 124] = Fx.getHessian()(169);
		ders[index * 289 + 125] = Fx.getHessian()(180);
		ders[index * 289 + 126] = Fx.getHessian()(181);
		ders[index * 289 + 127] = Fx.getHessian()(182);
		ders[index * 289 + 128] = Fx.getHessian()(183);
		ders[index * 289 + 129] = Fx.getHessian()(184);
		ders[index * 289 + 130] = Fx.getHessian()(185);
		ders[index * 289 + 131] = Fx.getHessian()(186);
		ders[index * 289 + 132] = Fx.getHessian()(198);
		ders[index * 289 + 133] = Fx.getHessian()(199);
		ders[index * 289 + 134] = Fx.getHessian()(200);
		ders[index * 289 + 135] = Fx.getHessian()(201);
		ders[index * 289 + 136] = Fx.getHessian()(202);
		ders[index * 289 + 137] = Fx.getHessian()(203);
		ders[index * 289 + 138] = Fx.getHessian()(216);
		ders[index * 289 + 139] = Fx.getHessian()(217);
		ders[index * 289 + 140] = Fx.getHessian()(218);
		ders[index * 289 + 141] = Fx.getHessian()(219);
		ders[index * 289 + 142] = Fx.getHessian()(220);
		ders[index * 289 + 143] = Fx.getHessian()(234);
		ders[index * 289 + 144] = Fx.getHessian()(235);
		ders[index * 289 + 145] = Fx.getHessian()(236);
		ders[index * 289 + 146] = Fx.getHessian()(237);
		ders[index * 289 + 147] = Fx.getHessian()(252);
		ders[index * 289 + 148] = Fx.getHessian()(253);
		ders[index * 289 + 149] = Fx.getHessian()(254);
		ders[index * 289 + 150] = Fx.getHessian()(270);
		ders[index * 289 + 151] = Fx.getHessian()(271);
		ders[index * 289 + 152] = Fx.getHessian()(288);
		ders[index * 289 + 153] = Fx.getHessian()(17);
		ders[index * 289 + 154] = Fx.getHessian()(34);
		ders[index * 289 + 155] = Fx.getHessian()(35);
		ders[index * 289 + 156] = Fx.getHessian()(51);
		ders[index * 289 + 157] = Fx.getHessian()(52);
		ders[index * 289 + 158] = Fx.getHessian()(53);
		ders[index * 289 + 159] = Fx.getHessian()(68);
		ders[index * 289 + 160] = Fx.getHessian()(69);
		ders[index * 289 + 161] = Fx.getHessian()(70);
		ders[index * 289 + 162] = Fx.getHessian()(71);
		ders[index * 289 + 163] = Fx.getHessian()(85);
		ders[index * 289 + 164] = Fx.getHessian()(86);
		ders[index * 289 + 165] = Fx.getHessian()(87);
		ders[index * 289 + 166] = Fx.getHessian()(88);
		ders[index * 289 + 167] = Fx.getHessian()(89);
		ders[index * 289 + 168] = Fx.getHessian()(102);
		ders[index * 289 + 169] = Fx.getHessian()(103);
		ders[index * 289 + 170] = Fx.getHessian()(104);
		ders[index * 289 + 171] = Fx.getHessian()(105);
		ders[index * 289 + 172] = Fx.getHessian()(106);
		ders[index * 289 + 173] = Fx.getHessian()(107);
		ders[index * 289 + 174] = Fx.getHessian()(119);
		ders[index * 289 + 175] = Fx.getHessian()(120);
		ders[index * 289 + 176] = Fx.getHessian()(121);
		ders[index * 289 + 177] = Fx.getHessian()(122);
		ders[index * 289 + 178] = Fx.getHessian()(123);
		ders[index * 289 + 179] = Fx.getHessian()(124);
		ders[index * 289 + 180] = Fx.getHessian()(125);
		ders[index * 289 + 181] = Fx.getHessian()(136);
		ders[index * 289 + 182] = Fx.getHessian()(137);
		ders[index * 289 + 183] = Fx.getHessian()(138);
		ders[index * 289 + 184] = Fx.getHessian()(139);
		ders[index * 289 + 185] = Fx.getHessian()(140);
		ders[index * 289 + 186] = Fx.getHessian()(141);
		ders[index * 289 + 187] = Fx.getHessian()(142);
		ders[index * 289 + 188] = Fx.getHessian()(143);
		ders[index * 289 + 189] = Fx.getHessian()(153);
		ders[index * 289 + 190] = Fx.getHessian()(154);
		ders[index * 289 + 191] = Fx.getHessian()(155);
		ders[index * 289 + 192] = Fx.getHessian()(156);
		ders[index * 289 + 193] = Fx.getHessian()(157);
		ders[index * 289 + 194] = Fx.getHessian()(158);
		ders[index * 289 + 195] = Fx.getHessian()(159);
		ders[index * 289 + 196] = Fx.getHessian()(160);
		ders[index * 289 + 197] = Fx.getHessian()(161);
		ders[index * 289 + 198] = Fx.getHessian()(170);
		ders[index * 289 + 199] = Fx.getHessian()(171);
		ders[index * 289 + 200] = Fx.getHessian()(172);
		ders[index * 289 + 201] = Fx.getHessian()(173);
		ders[index * 289 + 202] = Fx.getHessian()(174);
		ders[index * 289 + 203] = Fx.getHessian()(175);
		ders[index * 289 + 204] = Fx.getHessian()(176);
		ders[index * 289 + 205] = Fx.getHessian()(177);
		ders[index * 289 + 206] = Fx.getHessian()(178);
		ders[index * 289 + 207] = Fx.getHessian()(179);
		ders[index * 289 + 208] = Fx.getHessian()(187);
		ders[index * 289 + 209] = Fx.getHessian()(188);
		ders[index * 289 + 210] = Fx.getHessian()(189);
		ders[index * 289 + 211] = Fx.getHessian()(190);
		ders[index * 289 + 212] = Fx.getHessian()(191);
		ders[index * 289 + 213] = Fx.getHessian()(192);
		ders[index * 289 + 214] = Fx.getHessian()(193);
		ders[index * 289 + 215] = Fx.getHessian()(194);
		ders[index * 289 + 216] = Fx.getHessian()(195);
		ders[index * 289 + 217] = Fx.getHessian()(196);
		ders[index * 289 + 218] = Fx.getHessian()(197);
		ders[index * 289 + 219] = Fx.getHessian()(204);
		ders[index * 289 + 220] = Fx.getHessian()(205);
		ders[index * 289 + 221] = Fx.getHessian()(206);
		ders[index * 289 + 222] = Fx.getHessian()(207);
		ders[index * 289 + 223] = Fx.getHessian()(208);
		ders[index * 289 + 224] = Fx.getHessian()(209);
		ders[index * 289 + 225] = Fx.getHessian()(210);
		ders[index * 289 + 226] = Fx.getHessian()(211);
		ders[index * 289 + 227] = Fx.getHessian()(212);
		ders[index * 289 + 228] = Fx.getHessian()(213);
		ders[index * 289 + 229] = Fx.getHessian()(214);
		ders[index * 289 + 230] = Fx.getHessian()(215);
		ders[index * 289 + 231] = Fx.getHessian()(221);
		ders[index * 289 + 232] = Fx.getHessian()(222);
		ders[index * 289 + 233] = Fx.getHessian()(223);
		ders[index * 289 + 234] = Fx.getHessian()(224);
		ders[index * 289 + 235] = Fx.getHessian()(225);
		ders[index * 289 + 236] = Fx.getHessian()(226);
		ders[index * 289 + 237] = Fx.getHessian()(227);
		ders[index * 289 + 238] = Fx.getHessian()(228);
		ders[index * 289 + 239] = Fx.getHessian()(229);
		ders[index * 289 + 240] = Fx.getHessian()(230);
		ders[index * 289 + 241] = Fx.getHessian()(231);
		ders[index * 289 + 242] = Fx.getHessian()(232);
		ders[index * 289 + 243] = Fx.getHessian()(233);
		ders[index * 289 + 244] = Fx.getHessian()(238);
		ders[index * 289 + 245] = Fx.getHessian()(239);
		ders[index * 289 + 246] = Fx.getHessian()(240);
		ders[index * 289 + 247] = Fx.getHessian()(241);
		ders[index * 289 + 248] = Fx.getHessian()(242);
		ders[index * 289 + 249] = Fx.getHessian()(243);
		ders[index * 289 + 250] = Fx.getHessian()(244);
		ders[index * 289 + 251] = Fx.getHessian()(245);
		ders[index * 289 + 252] = Fx.getHessian()(246);
		ders[index * 289 + 253] = Fx.getHessian()(247);
		ders[index * 289 + 254] = Fx.getHessian()(248);
		ders[index * 289 + 255] = Fx.getHessian()(249);
		ders[index * 289 + 256] = Fx.getHessian()(250);
		ders[index * 289 + 257] = Fx.getHessian()(251);
		ders[index * 289 + 258] = Fx.getHessian()(255);
		ders[index * 289 + 259] = Fx.getHessian()(256);
		ders[index * 289 + 260] = Fx.getHessian()(257);
		ders[index * 289 + 261] = Fx.getHessian()(258);
		ders[index * 289 + 262] = Fx.getHessian()(259);
		ders[index * 289 + 263] = Fx.getHessian()(260);
		ders[index * 289 + 264] = Fx.getHessian()(261);
		ders[index * 289 + 265] = Fx.getHessian()(262);
		ders[index * 289 + 266] = Fx.getHessian()(263);
		ders[index * 289 + 267] = Fx.getHessian()(264);
		ders[index * 289 + 268] = Fx.getHessian()(265);
		ders[index * 289 + 269] = Fx.getHessian()(266);
		ders[index * 289 + 270] = Fx.getHessian()(267);
		ders[index * 289 + 271] = Fx.getHessian()(268);
		ders[index * 289 + 272] = Fx.getHessian()(269);
		ders[index * 289 + 273] = Fx.getHessian()(272);
		ders[index * 289 + 274] = Fx.getHessian()(273);
		ders[index * 289 + 275] = Fx.getHessian()(274);
		ders[index * 289 + 276] = Fx.getHessian()(275);
		ders[index * 289 + 277] = Fx.getHessian()(276);
		ders[index * 289 + 278] = Fx.getHessian()(277);
		ders[index * 289 + 279] = Fx.getHessian()(278);
		ders[index * 289 + 280] = Fx.getHessian()(279);
		ders[index * 289 + 281] = Fx.getHessian()(280);
		ders[index * 289 + 282] = Fx.getHessian()(281);
		ders[index * 289 + 283] = Fx.getHessian()(282);
		ders[index * 289 + 284] = Fx.getHessian()(283);
		ders[index * 289 + 285] = Fx.getHessian()(284);
		ders[index * 289 + 286] = Fx.getHessian()(285);
		ders[index * 289 + 287] = Fx.getHessian()(286);
		ders[index * 289 + 288] = Fx.getHessian()(287);

   }

   auto stop = high_resolution_clock::now();
   auto duration = duration_cast<microseconds>(stop - start);
   outfile << (double)duration.count() / 1000000.0 << " ";
   for (int i = 0; i < num_ders * num_params; i++)
   {
        ostringstream ss;
        ss.precision(3);
       ss << fixed << ders[i];
       outfile << ss.str() << " ";
   }

   outfile.close();

   return 0;
}